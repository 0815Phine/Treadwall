function Treadwall_predictable
%
if exist('tpredict','var')
    delete(tpredict)
end

global BpodSystem

%% ---------- Define task parameters --------------------------------------
start_path = BpodSystem.Path.DataFolder; % 'C:\Users\TomBombadil\Desktop\Animals' - Folder of current cohort selected in GUI;

% initialize parameters
S = struct(); %BpodSystem.ProtocolSettings;

% load correct parameters for location
location = questdlg('Where do you perform your experiments?',...
    'Locations',...
    'BN','ISR','ISR');
params_file = fullfile([BpodSystem.Path.ProtocolFolder '\treadwall_scrambled_parameters_', location, '.m']);
run(params_file)
fprintf('Parameters loaded for: %s \n', location);

if isempty(fieldnames(S))
    freshGUI = 1;        %flag to indicate that prameters have not been loaded from previous session.
    
    S.GUI.SubjectID = BpodSystem.GUIData.SubjectName;
    S.GUI.SessionID = BpodSystem.GUIData.SessionID;
    S.GUI.ITIDur = ITIDur; %in seconds
    S.GUI.ScalingFactor = 1;
    S.GUI.EmergencyStop = 'SendBpodSoftCode(2)';
    S.GUIMeta.EmergencyStop.Style = 'pushbutton';
    %S.GUI.ExpInfoPath = start_path;

    session_dir = ([start_path '\' S.GUI.SubjectID '\' S.GUI.SessionID]);
    animal_dir = ([start_path '\' S.GUI.SubjectID]);
else
    freshGUI  = 0;        %flag to indicate that prameters have been loaded from previous session.
end

BpodParameterGUI('init', S);
BpodSystem.ProtocolSettings = S;

%% ---------- Trials ------------------------------------------------------
% one trial will be defined as one lap on the treadmill
% maximum 100 laps per session
S.GUI.MaxTrialNumber = 100;

% load zones
if exist(fullfile([animal_dir '\zones.csv']), 'file')
    zones_dir = fullfile([animal_dir '\zones.csv']);
    fprintf('Zones have been loaded from %s\n', zones_dir);
else
    zones_dir = create_zones(animal_dir);
end

zones = readtable(zones_dir);
zones = zones.type;

for i = 1:length(zones)
    stimOutput{i} = GetStimOutput(zones{i});
end

%% ---------- Arduino Synchronizer ----------------------------------------
arduino = serialport('COM7', 115385);

% Send initial scaling value to Arduino
scalingValue = S.GUI.ScalingFactor;
writeline(arduino, strcat(num2str(scalingValue), '\n'));
lastScalingFactor = scalingValue;

%% ---------- Rotary Encoder Module ---------------------------------------
R = RotaryEncoderModule('COM8'); %check which COM is paired with rotary encoder module
R.thresholds = [-5,5];
R.sendThresholdEvents = 'On';
R.enableThresholds([1,1])

R.startUSBStream()

%R.streamUI() % for live streaming position, good for troubleshooting

%% ---------- Analog Output Module ----------------------------------------
W = BpodWavePlayer('COM3'); %check which COM is paired with analog output module

W.SamplingRate = 100;%in kHz
W.OutputRange = '0V:5V';
W.TriggerMode = 'Master';

% Waveforms for distances
lengthWave = 1800*W.SamplingRate; %maximum length of session
for i = 1:length(waveforms)
    W.loadWaveform(i, waveforms{i}*ones(1,lengthWave));
end

%% ---------- Analog Input Module ----------------------------------------
A = BpodAnalogIn('COM10'); %check which COM is paired with analog input module

A.SamplingRate = 100;%in kHz
A.nActiveChannels = 3;
A.InputRange = {'0V:10V', '0V:10V', '0V:10V', '0V:10V', '0V:10V', '0V:10V', '0V:10V', '0V:10V'};
A.Thresholds(1,1:3) = [4, 2.5, 1.5];
A.ResetVoltages(1,1:3) = [3.5, 1.65, 1.65];
A.SMeventsEnabled(1,1:3) = [1, 1, 1];
A.startReportingEvents()

%A.scope() % for live streaming inputs, good for troubleshooting

%% ---------- Setup Camera ------------------------------------------------
disp('Starting Python video acquisition script...');

pythonExe = 'C:\Users\TomBombadil\anaconda3\python.exe';
pyenv('Version', pythonExe);

scriptPath = "C:\Users\TomBombadil\Documents\GitHub\Treadwall\Code\Camera\VideoAquisition.py";

% Run in background
command = sprintf('"%s" "%s" "%s" "%s" "%s" &', pythonExe, scriptPath, session_dir, S.GUI.SubjectID, S.GUI.SessionID);
system(command);

%% ---------- Restart Timer -----------------------------------------------
BpodSystem.SerialPort.write('*', 'uint8');
Confirmed = BpodSystem.SerialPort.read(1,'uint8');
if Confirmed ~= 1
    error('Faulty clock reset')
end

%% ---------- Synching with WaveSurfer ------------------------------------
sma = NewStateMachine();
sma = AddState(sma, 'Name', 'WaitForWaveSurfer', ...
    'Timer',0,...
    'StateChangeConditions', {'BNC1High', 'exit'},...
    'OutputActions', {'WavePlayer1', ['!' 3 0 0]});
SendStateMachine(sma);
disp('Waiting for Wavesurfer...');
RawEvents = RunStateMachine;

if ~isempty(fieldnames(RawEvents)) % If trial data was returned
    BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); % Computes trial events from raw data
    SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file
end

disp('Synced with Wavesurfer.');

%% ---------- Main Loop ---------------------------------------------------
% start timer in Matlab, session ends if timer is up or 100 laps have been run
tpredict = timer;
tpredict.StartDelay = 1200;
tpredict.TimerFcn = "SendBpodSoftCode(1)";
tpredict.StartFcn = "fprintf('timer started\n')";

start(tpredict)
for currentTrial = 1:S.GUI.MaxTrialNumber
    disp(' ');
    disp('- - - - - - - - - - - - - - - ');
    disp(['Loop: ' num2str(currentTrial) ' - ' datestr(now,'HH:MM:SS')]);

    S = BpodParameterGUI('sync', S); %Sync parameters with BpodParameterGUI plugin

    % Get current Scaling value
    scalingValue = S.GUI.ScalingFactor;
    % If changed, update Arduino
    if scalingValue ~= lastScalingFactor
        writeline(arduino, strcat(num2str(scalingValue), '\n'));
        lastScalingFactor = scalingValue;
        fprintf('Updated Arduino with new ScalingFactor: %.1f \n', scalingValue);
    end

    % construct state machine
    sma = NewStateMachine(); %Assemble new state machine description

    %first trial: with start buffer
    if currentTrial == 1
        sma = AddState(sma, 'Name', 'StartBuffer', ...
            'Timer', S.GUI.ITIDur,...
            'StateChangeConditions', {'Tup', 'readDirection', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', ['!' 3 0 0]});

        sma = AddState(sma, 'Name', 'readDirection', ...
            'Timer', 0,...
            'StateChangeConditions', {'RotaryEncoder1_2', 'z1f', 'RotaryEncoder1_1', 'z1b', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', ['!' 3 0 0],'RotaryEncoder1', 'ZE'});

        % zone 1
        sma = AddState(sma, 'Name', 'z1f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2f', 'AnalogIn1_3', 'z1b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{1}});
        sma = AddState(sma, 'Name', 'z1b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4bb', 'AnalogIn1_2', 'z1f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{1}});

        % zone 2
        sma = AddState(sma, 'Name', 'z2f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3f', 'AnalogIn1_3', 'z2b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1b', 'AnalogIn1_2', 'z2f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3fb', 'AnalogIn1_3', 'z2bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1b', 'AnalogIn1_2', 'z2fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});

        % zone 3
        sma = AddState(sma, 'Name', 'z3f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4f', 'AnalogIn1_3', 'z3b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2b', 'AnalogIn1_2', 'z3f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4fb', 'AnalogIn1_3', 'z3bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2bb', 'AnalogIn1_2', 'z3fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});

        % zone 4: exit trial after completing zone 4
        sma = AddState(sma, 'Name', 'z4f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','exit', 'AnalogIn1_3', 'z4b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3b', 'AnalogIn1_2', 'z4f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1f', 'AnalogIn1_3', 'z4bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3bb', 'AnalogIn1_2', 'z4fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});

        % reached timer
        sma = AddState(sma, 'Name', 'EndBuffer',...
            'Timer', 10,...
            'StateChangeConditions', {'Tup', 'StopCamera', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', ['!' 3 0 0]});

        sma = AddState(sma, 'Name', 'StopCamera', ...
            'Timer', 1,...
            'StateChangeConditions', {'Tup', 'exit'},...
            'OutputActions', {'BNC1',1});

    % last trial: with end buffer
    elseif currentTrial == S.GUI.MaxTrialNumber
        % zone 1
        sma = AddState(sma, 'Name', 'z1f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2f', 'AnalogIn1_3', 'z1b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{1}});
        sma = AddState(sma, 'Name', 'z1b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4bb', 'AnalogIn1_2', 'z1f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{1}});

        % zone 2
        sma = AddState(sma, 'Name', 'z2f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3f', 'AnalogIn1_3', 'z2b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1b', 'AnalogIn1_2', 'z2f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3fb', 'AnalogIn1_3', 'z2bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1b', 'AnalogIn1_2', 'z2fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});

        % zone 3
        sma = AddState(sma, 'Name', 'z3f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4f', 'AnalogIn1_3', 'z3b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2b', 'AnalogIn1_2', 'z3f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4fb', 'AnalogIn1_3', 'z3bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2bb', 'AnalogIn1_2', 'z3fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});

        % zone 4: exit experiment after completing zone 4
        sma = AddState(sma, 'Name', 'z4f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','EndBuffer', 'AnalogIn1_3', 'z4b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3b', 'AnalogIn1_2', 'z4f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1f', 'AnalogIn1_3', 'z4bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3bb', 'AnalogIn1_2', 'z4fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});

        % exit experiment
        sma = AddState(sma, 'Name', 'EndBuffer',...
            'Timer', 10,...
            'StateChangeConditions', {'Tup', 'StopCamera', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', ['!' 3 0 0]});

        sma = AddState(sma, 'Name', 'StopCamera', ...
            'Timer', 1,...
            'StateChangeConditions', {'Tup', 'exit'},...
            'OutputActions', {'BNC1',1});

    else
        % zone 1
        sma = AddState(sma, 'Name', 'z1f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2f', 'AnalogIn1_3', 'z1b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{1}});
        sma = AddState(sma, 'Name', 'z1b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4bb', 'AnalogIn1_2', 'z1f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{1}});

        % zone 2
        sma = AddState(sma, 'Name', 'z2f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3f', 'AnalogIn1_3', 'z2b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1b', 'AnalogIn1_2', 'z2f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3fb', 'AnalogIn1_3', 'z2bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});
        sma = AddState(sma, 'Name', 'z2bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1b', 'AnalogIn1_2', 'z2fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{2}});

        % zone 3
        sma = AddState(sma, 'Name', 'z3f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4f', 'AnalogIn1_3', 'z3b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2b', 'AnalogIn1_2', 'z3f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z4fb', 'AnalogIn1_3', 'z3bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});
        sma = AddState(sma, 'Name', 'z3bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z2bb', 'AnalogIn1_2', 'z3fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{3}});

        % zone 4: exit trial after completing zone 4
        sma = AddState(sma, 'Name', 'z4f',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','exit', 'AnalogIn1_3', 'z4b', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4b',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3b', 'AnalogIn1_2', 'z4f', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4fb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z1f', 'AnalogIn1_3', 'z4bb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});
        sma = AddState(sma, 'Name', 'z4bb',...
            'Timer',0,...
            'StateChange Conditions', {'AnalogIn1_1','z3bb', 'AnalogIn1_2', 'z4fb', 'SoftCode1', 'EndBuffer', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', stimOutput{4}});

        % reached timer
        sma = AddState(sma, 'Name', 'EndBuffer',...
            'Timer', 10,...
            'StateChangeConditions', {'Tup', 'StopCamera', 'SoftCode2', 'StopCamera'},...
            'OutputActions', {'WavePlayer1', ['!' 3 0 0]});

        sma = AddState(sma, 'Name', 'StopCamera', ...
            'Timer', 1,...
            'StateChangeConditions', {'Tup', 'exit'},...
            'OutputActions', {'BNC1',1});
    end

    % run state machine
    SendStateMachine(sma);
    RawEvents = RunStateMachine;

    if ~isempty(fieldnames(RawEvents)) %If trial data was returned
        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); %Computes trial events from raw data
        BpodSystem.Data.TrialSettings(currentTrial) = S;
        BpodSystem.Data.Loop(currentTrial) = currentTrial;
        SaveBpodSessionData; %Saves the field BpodSystem.Data to the current data file
        SaveBpodProtocolSettings;
    end

    if strcmp(tpredict.Running, 'off')
        fprintf('timer stopped\n')
        W.setFixedVoltage([1 2], 0)
        break
    end

    if BpodSystem.Status.BeingUsed == 0
        disp('Session ended via Bpod Console. Current trial data has not been saved')
        W.setFixedVoltage([1 2], 0)
        break
    end
end

clear arduino
disp('Loop end');

disp('Saving Rotary Encoder Data...')
RotData = R.readUSBStream();
save([session_dir '\RotData'],'RotData')
R.stopUSBStream()

disp('Stop wavesurfer. Stop Bpod');
end